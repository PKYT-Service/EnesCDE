import os
import shutil
import json
import webview
from ftplib import FTP
import requests

# ---------------- CONFIG ----------------
MID_FOLDER = r"C:\e-cde\MID"
CONFIG_FILE = os.path.join(MID_FOLDER, "config.json")
LFP_FOLDER = os.path.join(MID_FOLDER, "LFP")
VPS_FTP_HOST = "51.77.140.39"
VPS_FTP_USER = "ftpuser"
VPS_FTP_PASS = "instance"

APP_V_URL = "https://enes-cde.vercel.app/data/MID_MC/v.json"
APP_CODE_URL = "https://enes-cde.vercel.app/data/MID_MC/main.txt"

# ---------------- UTILS ----------------
def ensure_dirs(*dirs):
    for d in dirs:
        if not os.path.exists(d):
            os.makedirs(d)

def load_json(path):
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_json(path, data):
    ensure_dirs(os.path.dirname(path))
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4)

def compare_and_clean(client_folder, lfp_folder):
    """Supprime dans client_folder les fichiers identiques au LFP"""
    if not os.path.exists(lfp_folder):
        return
    for root, _, files in os.walk(lfp_folder):
        for file in files:
            rel_path = os.path.relpath(os.path.join(root, file), lfp_folder)
            client_file = os.path.join(client_folder, rel_path)
            lfp_file = os.path.join(root, file)
            if os.path.exists(client_file) and os.path.getsize(client_file) == os.path.getsize(lfp_file):
                os.remove(client_file)

def copy_to_lfp_and_local(src_folder, client_folder, lfp_folder):
    """Copie tous les fichiers de src_folder vers client et LFP"""
    for root, _, files in os.walk(src_folder):
        for file in files:
            rel_path = os.path.relpath(root, src_folder)
            dest_client = os.path.join(client_folder, rel_path)
            dest_lfp = os.path.join(lfp_folder, rel_path)
            ensure_dirs(dest_client, dest_lfp)
            shutil.copy2(os.path.join(root, file), dest_client)
            shutil.copy2(os.path.join(root, file), dest_lfp)

def ftp_download(ftp, remote_path, local_path):
    """Télécharge récursivement un dossier FTP"""
    ensure_dirs(local_path)
    try:
        ftp.cwd(remote_path)
        items = ftp.nlst()
        for item in items:
            item_remote = f"{remote_path}/{item}"
            local_item = os.path.join(local_path, item)
            try:
                ftp.cwd(item)
                ftp_download(ftp, item_remote, local_item)
                ftp.cwd("..")
            except:
                with open(local_item, "wb") as f:
                    ftp.retrbinary(f"RETR {item}", f.write)
    except Exception as e:
        print(f"Erreur FTP: {e}")

# ---------------- CONFIG CLIENT ----------------
def setup_config():
    config = {}
    # UI: ask via popup if possible, else fallback to input
    try:
        import tkinter as tk
        from tkinter import filedialog, simpledialog
        root = tk.Tk()
        root.withdraw()
        config['mods'] = filedialog.askdirectory(title="Sélectionnez le dossier mods")
        config['shaderpacks'] = filedialog.askdirectory(title="Sélectionnez le dossier shaderpacks")
        config['resourcepacks'] = filedialog.askdirectory(title="Sélectionnez le dossier resourcepacks")
    except Exception:
        print("Définir les dossiers locaux :")
        config['mods'] = input("Chemin dossier mods : ").strip()
        config['shaderpacks'] = input("Chemin dossier shaderpacks : ").strip()
        config['resourcepacks'] = input("Chemin dossier resourcepacks : ").strip()
    config['LFP'] = LFP_FOLDER
    ensure_dirs(config['mods'], config['shaderpacks'], config['resourcepacks'], LFP_FOLDER)
    save_json(CONFIG_FILE, config)
    return config

def load_config():
    cfg = load_json(CONFIG_FILE)
    if not cfg:
        cfg = setup_config()
    return cfg

# ---------------- UPDATE APP ----------------
def check_app_update():
    local_v_file = os.path.join(MID_FOLDER, "v_app.json")
    local_version = 0
    if os.path.exists(local_v_file):
        try:
            local_version = int(json.load(open(local_v_file, "r")).get("version", 0))
        except:
            local_version = 0
    try:
        r = requests.get(APP_V_URL)
        r.raise_for_status()
        remote_version = int(r.json().get("version", 0))
    except Exception as e:
        print(f"Impossible de vérifier la version distante : {e}")
        return False, local_version

    if remote_version > local_version:
        return True, remote_version
    return False, local_version

def update_app():
    try:
        r = requests.get(APP_CODE_URL)
        r.raise_for_status()
        new_code = r.text
        app_path = os.path.join(MID_FOLDER, "mid.py")
        with open(app_path, "w", encoding="utf-8") as f:
            f.write(new_code)
        _, remote_version = check_app_update()
        with open(os.path.join(MID_FOLDER, "v_app.json"), "w") as f:
            json.dump({"version": remote_version}, f)
        return "Mise à jour effectuée avec succès ! Redémarre le script pour appliquer les changements."
    except Exception as e:
        return f"Erreur lors de la mise à jour : {e}"

# ---------------- ACTIONS ----------------
def install_instance_from_ftp(ftp_path, client_folders, instance_name="Base"):
    with FTP(VPS_FTP_HOST) as ftp:
        ftp.login(VPS_FTP_USER, VPS_FTP_PASS)
        tmp_local = os.path.join(LFP_FOLDER, "tmp_download")
        if os.path.exists(tmp_local):
            shutil.rmtree(tmp_local)
        for key in client_folders.keys():
            remote_sub = f"{ftp_path}/{key}"
            local_sub = os.path.join(tmp_local, key)
            ftp_download(ftp, remote_sub, local_sub)

    for key, folder in client_folders.items():
        lfp_sub = os.path.join(LFP_FOLDER, instance_name, key.upper())
        compare_and_clean(folder, lfp_sub)
        shutil.rmtree(lfp_sub, ignore_errors=True)
        ensure_dirs(lfp_sub)
        src_sub = os.path.join(tmp_local, key)
        if os.path.exists(src_sub):
            copy_to_lfp_and_local(src_sub, folder, lfp_sub)
    shutil.rmtree(tmp_local)
    return f"{instance_name} installé avec succès !"

def remove_instance(client_folders, instance_name="Base"):
    for key, folder in client_folders.items():
        lfp_sub = os.path.join(LFP_FOLDER, instance_name, key.upper())
        compare_and_clean(folder, lfp_sub)
        shutil.rmtree(lfp_sub, ignore_errors=True)
    return f"{instance_name} supprimé !"

# ---------------- API POUR WEBVIEW ----------------
class API:
    def __init__(self):
        ensure_dirs(MID_FOLDER, LFP_FOLDER)
        self.config = load_config()
        self.folders = {
            "mods": self.config['mods'],
            "shaderpacks": self.config['shaderpacks'],
            "resourcepacks": self.config['resourcepacks']
        }

    def install_base(self):
        return install_instance_from_ftp("/base", self.folders, "Base")

    def remove_base(self):
        return remove_instance(self.folders, "Base")

    def update_base(self):
        return install_instance_from_ftp("/base", self.folders, "Base")

    def install_server(self):
        # UI: ask for server name
        try:
            import tkinter as tk
            from tkinter import simpledialog
            root = tk.Tk()
            root.withdraw()
            server_name = simpledialog.askstring("Nom du serveur", "Nom de l'instance serveur :")
            if not server_name:
                return "Opération annulée."
        except Exception:
            server_name = "Serveur"
        return install_instance_from_ftp(f"/server/{server_name}", self.folders, server_name)

    def remove_server(self):
        try:
            import tkinter as tk
            from tkinter import simpledialog
            root = tk.Tk()
            root.withdraw()
            server_name = simpledialog.askstring("Nom du serveur", "Nom de l'instance serveur :")
            if not server_name:
                return "Opération annulée."
        except Exception:
            server_name = "Serveur"
        return remove_instance(self.folders, server_name)

    def update_server(self):
        try:
            import tkinter as tk
            from tkinter import simpledialog
            root = tk.Tk()
            root.withdraw()
            server_name = simpledialog.askstring("Nom du serveur", "Nom de l'instance serveur :")
            if not server_name:
                return "Opération annulée."
        except Exception:
            server_name = "Serveur"
        return install_instance_from_ftp(f"/server/{server_name}", self.folders, server_name)

    def update_app(self):
        return update_app()

# ---------------- HTML / JS ----------------
HTML_CONTENT = """
<html class="scroll-smooth" lang="fr">
 <head>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1" name="viewport"/>
  <title>Gestionnaire MID - Interface Moderne 2025</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet"/>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&amp;display=swap" rel="stylesheet"/>
  <style>
   body { font-family: 'Inter', sans-serif; }
   ::-webkit-scrollbar { width: 8px; }
   ::-webkit-scrollbar-track { background: transparent; }
   ::-webkit-scrollbar-thumb { background-color: #a78bfa; border-radius: 10px; }
   button { cursor: pointer; }
  </style>
 </head>
 <body class="bg-gradient-to-tr from-indigo-900 via-purple-900 to-pink-900 min-h-screen flex flex-col">
  <header class="bg-gradient-to-r from-purple-700 via-indigo-700 to-pink-700 shadow-lg sticky top-0 z-50">
   <div class="max-w-7xl mx-auto px-6 py-4 flex items-center justify-between">
    <div class="flex items-center space-x-3">
     <img alt="Logo MID" class="w-12 h-12 rounded-lg shadow-lg" src="https://storage.googleapis.com/a1aa/image/bd82c8cc-08b6-48be-d117-bfc622aec422.jpg"/>
     <h1 class="text-white text-2xl font-extrabold tracking-wide select-none">MID - Gerer votre instance.</h1>
    </div>
    <nav class="hidden md:flex space-x-8 text-white font-semibold text-lg">
     <button class="menu-btn" data-menu="base">Base</button>
     <button class="menu-btn" data-menu="server">Instance Serveur</button>
     <button class="menu-btn" data-menu="update">Mise à jour</button>
    </nav>
    <button aria-label="Ouvrir menu" class="md:hidden text-white text-2xl" id="mobile-menu-btn"><i class="fas fa-bars"></i></button>
   </div>
   <nav class="md:hidden bg-purple-800/95 backdrop-blur-sm max-h-0 overflow-hidden transition-max-height duration-500" id="mobile-menu">
    <div class="flex flex-col px-6 py-4 space-y-3 text-white font-semibold text-lg">
     <button class="menu-btn-mobile" data-menu="base">Base</button>
     <button class="menu-btn-mobile" data-menu="server">Instance Serveur</button>
     <button class="menu-btn-mobile" data-menu="update">Mise à jour</button>
    </div>
   </nav>
  </header>
  <main class="flex-grow max-w-7xl mx-auto px-6 py-8 w-full flex flex-col md:flex-row gap-8">
   <aside class="hidden md:flex flex-col w-64 bg-purple-900/80 rounded-xl shadow-xl p-6 sticky top-24 h-[calc(100vh-6rem)] overflow-y-auto">
    <h2 class="text-white text-xl font-bold mb-6 select-none">Menu</h2>
    <ul class="space-y-4 text-purple-200 font-semibold">
     <li><button class="w-full text-left flex items-center gap-3 hover:text-pink-400" data-action="install_base"><i class="fas fa-download text-pink-400"></i> Installer / Réinstaller Base</button></li>
     <li><button class="w-full text-left flex items-center gap-3 hover:text-pink-400" data-action="remove_base"><i class="fas fa-trash-alt text-pink-400"></i> Supprimer Base</button></li>
     <li><button class="w-full text-left flex items-center gap-3 hover:text-pink-400" data-action="update_base"><i class="fas fa-sync-alt text-pink-400"></i> Mettre à jour Base</button></li>
     <li><hr class="border-purple-700"/></li>
     <li><button class="w-full text-left flex items-center gap-3 hover:text-pink-400" data-action="install_server"><i class="fas fa-server text-pink-400"></i> Installer Instance Serveur</button></li>
     <li><button class="w-full text-left flex items-center gap-3 hover:text-pink-400" data-action="remove_server"><i class="fas fa-trash text-pink-400"></i> Supprimer Instance Serveur</button></li>
     <li><button class="w-full text-left flex items-center gap-3 hover:text-pink-400" data-action="update_server"><i class="fas fa-sync text-pink-400"></i> Mettre à jour Instance Serveur</button></li>
     <li><hr class="border-purple-700"/></li>
     <li><button class="w-full text-left flex items-center gap-3 hover:text-pink-400" data-action="update_app"><i class="fas fa-arrow-circle-up text-pink-400"></i> Mettre à jour l'app</button></li>
     <li><hr class="border-purple-700"/></li>
     <li><button class="w-full text-left flex items-center gap-3 text-red-400 hover:text-red-600 font-bold" id="btn-quit"><i class="fas fa-sign-out-alt"></i> Quitter</button></li>
    </ul>
   </aside>
   <section class="flex-grow bg-white/90 rounded-3xl shadow-2xl p-8 max-w-full min-h-[480px] flex flex-col justify-start" id="content">
    <h2 class="text-3xl font-extrabold text-indigo-900 mb-6 select-none" id="content-title">Bienvenue dans le Gestionnaire MID</h2>
    <div class="text-indigo-900 text-lg leading-relaxed max-w-3xl" id="content-body">
     <p>Utilisez le menu à gauche ou en haut pour gérer vos instances Minecraft, mettre à jour la base, ou l'application.</p>
     <p class="mt-4">Cette interface moderne et ergonomique vous guide pas à pas dans vos opérations.</p>
    </div>
   </section>
  </main>
  <footer class="bg-purple-800 text-purple-300 text-center py-4 select-none">© 2025 Enes - CDE <a href="https://enes-cde.vercel.app">WEb</a> </footer>
  <script>
    const mobileMenuBtn = document.getElementById('mobile-menu-btn');
    const mobileMenu = document.getElementById('mobile-menu');
    mobileMenuBtn.addEventListener('click', () => {
        mobileMenu.style.maxHeight = mobileMenu.style.maxHeight && mobileMenu.style.maxHeight !== '0px' ? '0px' : mobileMenu.scrollHeight + 'px';
    });
    document.querySelectorAll('[data-action]').forEach(btn => {
        btn.addEventListener('click', e => {
            const action = e.currentTarget.getAttribute('data-action');
            if(window.pywebview) {
                window.pywebview.api[action]().then(msg => {
                    document.getElementById('content-body').innerHTML = "<p class='text-green-600 font-bold text-lg'>" + msg + "</p>";
                });
            }
        });
    });
    document.getElementById('btn-quit').addEventListener('click', () => {
        if(confirm("Voulez-vous vraiment quitter ?")) window.pywebview.close();
    });
  </script>
 </body>
</html>
"""

# ---------------- LANCEMENT ----------------
if __name__ == "__main__":
    api = API()
    window = webview.create_window(
        "Gestionnaire MID",
        html=HTML_CONTENT,
        width=1200,
        height=800,
        js_api=api
    )
    webview.start(debug=False, http_server=True)
